name: Deploy to Amazon ECR

on:
  push:
    branches:
      - test
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_PBT }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_PBT }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PBT_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PBT_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

        run: |
          echo "DATABASE_URL=${{ secrets.PBT_DATABASE_URL }}" >> .env
          echo "NODE_ENV=production" >> .env
          echo "CLOUDWATCH_GROUP_NAME=${{ secrets.CLOUDWATCH_GROUP_NAME }}" >> .env
          echo "CLOUDWATCH_ACCESS_KEY=${{ secrets.PBT_AWS_ACCESS_KEY_ID }}" >> .env
          echo "CLOUDWATCH_SECRET_ACCESS_KEY=${{ secrets.PBT_AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "CLOUDWATCH_REGION=${{ secrets.AWS_REGION }}" >> .env
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: setting-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: delivery-0111
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.setting-task-definition.outputs.task-definition }}
          service: ecs-hhplus-service
          cluster: ecs-cluster
          wait-for-service-stability: false
